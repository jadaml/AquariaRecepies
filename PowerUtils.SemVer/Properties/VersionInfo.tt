<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="JAL.Utilities" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>
<#

uint major = 1;
uint minor = 0;
uint patch = 0;

string preReleaseStage = "";
uint preReleaseLevel = 0;

string build = Environment.GetEnvironmentVariable("BUILD_NUMBER") ?? "0";
string revision = Environment.GetEnvironmentVariable("REVISION_NUMBER") ?? "0";

////////////////////////////////////////////////////////////////////////////////

IEnumerable<object> preRelease = from identifier in new object[] { preReleaseStage, preReleaseLevel }
                                 where identifier != null
                                    && (identifier as string != ""
                                     || identifier as uint? > 0)
                                 select identifier;

object[] buildMetaData = new object[] { build, revision };

Version assemblyVersion = new Version((int)major, (int)minor, 0, 0);
Version fileVersion = new Version((int)major, (int)minor, int.Parse(build), int.Parse(revision));
SemanticVersion productVersion = new SemanticVersion(major, minor, patch, preRelease, buildMetaData);

preRelease = from identifier in preRelease
             select identifier is string ? $@"""{identifier}""" : identifier;

#>
using JAL.Utilities;
using System;
using System.Reflection;

[assembly: AssemblyVersion(VersionInfo._assemblyVersionString)]
[assembly: AssemblyFileVersion(VersionInfo._fileVersionString)]
[assembly: AssemblyInformationalVersion(VersionInfo._productVersionString)]

partial class VersionInfo
{
    internal const string _assemblyVersionString = "<#= assemblyVersion #>";
    internal const string _fileVersionString = "<#= fileVersion #>";
    internal const string _productVersionString = "<#= productVersion #>";

    internal static readonly Version AssemblyVersion = new Version(<#= major #>, <#= minor #>);
    internal static readonly Version FileVersion = new Version(<#= major #>, <#= minor #>, <#= build #>, <#= revision #>);
    internal static readonly SemanticVersion ProductVersion = new SemanticVersion(<#= major #>, <#= minor #>, <#= patch #>,
        new object[] { <#= string.Join(", ", preRelease) #> },
        new object[] { <#= build #>, <#= revision #> });
}
